#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <map>
#include <queue>
#include <climits>
#include <utility>
#include <functional>
#include <string.h>
const int one = 1;
const int INF = one << 30;

using namespace std;
vector< vector < pair < int, int > > > graph;
int n, m, q;
int dist[3005][155];
long long int Dijkstra(int s, int t, int c)
{
    c=min(m,c);
    for (int i = 0; i <= c; i++)
        for (int j = 0; j <= n; j++)
            dist[i][j] = INF;
    int res = INF;
    priority_queue<
            pair<int, pair<int, pair<int, int> > >,
            vector< pair<int, pair<int, pair<int, int> > > >,
            greater< pair<int, pair<int, pair<int, int> > > > > pq;
    pq.push(make_pair(0, make_pair(s, make_pair(c, 0))));
    dist[c][s]=0;
    while (!pq.empty())
    {
        pair<int, pair< int, pair<int, int> > > p = pq.top();
        pq.pop();
        int u = p.second.first;
        int d = p.first;
        int cc = p.second.second.first;
        int prev = p.second.second.second;
//        if(dist[cc][u]<d)
//            continue;
        if (u == t)
            res = min(res, d);
        if (cc > 0)
        {
            for (int i = 0; i < graph[u].size(); i++)
            {
                int v = graph[u][i].second;
                int dv = graph[u][i].first;
                if (dist[cc][v]>=dv+d && dv > prev)
                {
                    dist[cc][v]=dv+d;
                    pq.push(make_pair(dv + d, make_pair(v, make_pair(cc - 1, dv))));
                }
            }
        }
    }
    return (res == INF) ? -1 : res;
}

int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int cases;
    cin >> cases;
    while (cases--)
    {
        cin >> n >> m >> q;
        graph.clear();
        graph.assign(n + 1, vector< pair<int, int> >());
        for (int i = 0; i < m; i++)
        {
            int t1, t2, t3;
            cin >> t1 >> t2 >> t3;
            graph[t1].push_back(make_pair(t3, t2));
        }
        for (int i = 0; i < q; i++)
        {
            int s, t, c;
            cin >> s >> t >> c;
            long long int res = Dijkstra(s, t, c);
            cout << res << endl;
        }
    }
}
