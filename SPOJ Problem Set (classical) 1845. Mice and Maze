#include <iostream>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <cstdlib>
#include <stdio.h>
#include <functional>
#include <algorithm>
#include <sstream>
#define INF 20000000
using namespace std;
bool visited[105];
long int dist[105];
bool Dijikstra(vector< vector < pair < int, int > > > graph, int n, int s, int t, int limit) {
    int time = 0;
    memset(visited, false, sizeof (visited));
    for(int i=0;i<105;i++)
        dist[i]=99999999l;
    priority_queue < pair < int, int >, vector<pair < int, int > >, greater< pair<int, int> > > pq;
    dist[s] = 0;
    pq.push(make_pair(0, s));
    while (!pq.empty()) {
        pair<int, int> p = pq.top();
        pq.pop();
        int d = p.first;
        int u = p.second;
        time += d;

        if (visited[u])
            continue;
        visited[u] = true;
        if (u == t) {
            return true;
        }
        if (time > limit)
            return false;
        for (int i = 0; i < graph[u].size(); i++) {
            int neabor = graph[u][i].first;
            int neaborweight = graph[u][i].second;
            if (dist[u] + neaborweight < dist[neabor]) {
                dist[neabor] = dist[u] + neaborweight;
                pq.push(make_pair(dist[neabor], neabor));
            }
        }
    }
    return false;
}

int main() {
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    int n, t, T;
    cin >> n >> t >> T;
    vector< vector < pair < int, int> > > graph(n + 2);
    int M;
    cin >> M;
    for (int i = 0; i < M; i++) {
        int t1, t2, t3;
        cin >> t1 >> t2 >> t3;
        graph[t1].push_back(make_pair(t2, t3));
    }
    int res = 0;
    for (int i = 1; i <= n; i++) {
        if (Dijikstra(graph, n, i, t, T)) {
            res++;
        }
    }
    cout << res << endl;
}
